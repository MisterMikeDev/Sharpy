generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserXp {
  id                  String   @id @default(cuid())
  userId              String   @unique
  textXp              Int      @default(0)
  textXpForNextLevel  Int      @default(100)
  voiceXp             Int      @default(0)
  voiceXpForNextLevel Int      @default(50)
  textLevel           Int      @default(0)
  voiceLevel          Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Tickets {
  id             String             @id @default(cuid())
  authorId       String             @unique
  messageId      String             @unique
  channelId      String             @unique
  affaire        String
  staffIdClaimed String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  resolution     TicketsResolution?
}

model TicketsResolution {
  id        String   @id @default(cuid())
  ticketId  String   @unique
  staffId   String?
  reason    String
  closedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Tickets  @relation(fields: [ticketId], references: [id])
}

model Suggestions {
  id         String   @id @default(cuid())
  authorId   String
  messageId  String   @unique
  suggestion String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  votes      Votes[]
}

model Votes {
  id           String      @id @default(cuid())
  suggestionId String
  userId       String
  vote         Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  suggestion   Suggestions @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
}

model Replic {
  id           String        @id @default(cuid())
  channelId    String
  messageId    String
  participant1 String?
  participant2 String?
  participant3 String?
  participant4 String?
  replicStatus Int           @default(0)
  currentTurn  Int           @default(1)
  winnerId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  votes        ReplicVotes[]
}

model ReplicVotes {
  id        String   @id @default(cuid())
  replicId  String
  userId    String
  voteFor   Int
  weight    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replic    Replic   @relation(fields: [replicId], references: [id], onDelete: Cascade)
}

model Blacklist {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PreApeals {
  id                String   @id @default(cuid())
  userId            String   @unique
  reason            String
  timeNeededToApeal Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Apeals {
  id                  String   @id @default(cuid())
  userId              String   @unique
  situation           String
  commitment          String
  categoryId          String
  textApealChannelId  String
  voiceApealChannelId String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Pardons {
  id        String   @id @default(cuid())
  userId    String
  staffId   String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warns {
  id        String   @id @default(cuid())
  userId    String
  staffId   String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SingRank {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Birthdays {
  id        String   @id @default(cuid())
  userId    String   @unique
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
